@using Microsoft.AspNetCore.Identity
@inject SignInManager<EuropeanContractUser> SignInManager
@inject UserManager<EuropeanContractUser> UserManager
@inject ITransportCompanyService transportService
@inject IRecipientCompanyService recipientService
@inject ISupplierCompanyService supplierService

<li class="navbar-text-light">
    @if (SignInManager.IsSignedIn(User))
    {
        if (await transportService.IsTransporterExistFindByUserIdAsync(User.Id()))
        {
            <div>
                <b>
                    TRANSPORT COMPANY:"@await transportService.ReturnTransporterNameAsync(User.Id())"
                </b>
                <a class="btn btn-primary" asp-controller="TransportCompany" asp-action="MyOffers">My Offers </a>
                <a class="btn btn-primary" asp-controller="TransportCompany" asp-action="AllTrucks">My Trucks </a>
                <a class="btn btn-primary" asp-controller="TransportCompany" asp-action="AllTrailers">My Trailers </a>
                <a class="btn btn-primary" asp-controller="Truck" asp-action="Add">Add Truck </a>
                <a class="btn btn-primary" asp-controller="Trailer" asp-action="Add">Add Trailer </a>
            </div>
        }
        if (await recipientService.IsRecipientExistFindByUserIdAsync(User.Id()))
        {
            <b>
                RECIPIENT COMPANY:"@await recipientService.ReturnRecipientName(User.Id())"
            </b>
            <a class="btn btn-primary" asp-controller="RecipientCompany" asp-action="MyOffers">My Offers </a>
        }
        if (await supplierService.FindSupplierByIdAsync(User.Id()))
        {
            <b>
                SUPPLIER COMPANY: "@await supplierService.ReturnSupplierName(User.Id())"
            </b>
            <a class="btn btn-primary" asp-controller="SupplierCompany" asp-action="MyOffers">My Offers </a>
            <a class="btn btn-primary" asp-controller="Offer" asp-action="Create">Create Offer </a>
        }
    }
</li>
