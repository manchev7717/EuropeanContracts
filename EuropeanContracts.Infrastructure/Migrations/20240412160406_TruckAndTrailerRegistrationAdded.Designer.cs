// <auto-generated />
using System;
using EuropeanContracts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EuropeanContracts.Infrastructure.Migrations
{
    [DbContext(typeof(EuropeanContractsDbContext))]
    [Migration("20240412160406_TruckAndTrailerRegistrationAdded")]
    partial class TruckAndTrailerRegistrationAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Action identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Action type additional description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of action");

                    b.HasKey("Id");

                    b.ToTable("ActionsTypes");

                    b.HasComment("Тhe action we can do with the product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The amount is the purchase price of the goods and is in euros",
                            Name = "Sale"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Тhe price is for one month of use and is in euros",
                            Name = "Rent"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Тhe price is for transport the cargo to the delivery address and is in euros",
                            Name = "Transportation"
                        });
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.AutoTruck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Truck identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("HasCargoSpace")
                        .HasColumnType("bit")
                        .HasComment("Is there in truck cargo space");

                    b.Property<bool>("HasTemperatureControl")
                        .HasColumnType("bit")
                        .HasComment("Is there temperature control");

                    b.Property<int>("HorsePower")
                        .HasMaxLength(10000)
                        .HasColumnType("int")
                        .HasComment("Truck horse power");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Truck make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Truck model");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Truck registration number");

                    b.Property<int>("TransportCompanyId")
                        .HasColumnType("int")
                        .HasComment("Owner identifier");

                    b.Property<string>("TruckImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Track image URL");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.HasIndex("TransportCompanyId");

                    b.ToTable("AutoTrucks");

                    b.HasComment("Track");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasCargoSpace = false,
                            HasTemperatureControl = false,
                            HorsePower = 450,
                            Make = "DAF",
                            Model = "XG+",
                            RegistrationNumber = "CB5758CB",
                            TransportCompanyId = 1,
                            TruckImageURL = "/Images/TruckImages/DAF.png"
                        },
                        new
                        {
                            Id = 2,
                            HasCargoSpace = false,
                            HasTemperatureControl = false,
                            HorsePower = 500,
                            Make = "VOLVO",
                            Model = "FX",
                            RegistrationNumber = "IAE7551",
                            TransportCompanyId = 2,
                            TruckImageURL = "/Images/TruckImages/VOLVO.png"
                        },
                        new
                        {
                            Id = 3,
                            HasCargoSpace = true,
                            HasTemperatureControl = false,
                            HorsePower = 510,
                            Make = "SCANIA",
                            Model = "R510",
                            RegistrationNumber = "B125VTG",
                            TransportCompanyId = 2,
                            TruckImageURL = "/Images/TruckImages/SCANIA.png"
                        },
                        new
                        {
                            Id = 4,
                            HasCargoSpace = true,
                            HasTemperatureControl = false,
                            HorsePower = 450,
                            Make = "DAF",
                            Model = "XF+",
                            RegistrationNumber = "W1255BCV",
                            TransportCompanyId = 2,
                            TruckImageURL = "/Images/TruckImages/DAF-XF-FRIGO.png"
                        });
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Offer identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int")
                        .HasComment("Action type identifier");

                    b.Property<string>("AddressOfDestination")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Address of destination");

                    b.Property<string>("CountryOfDestination")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Country of destination");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2")
                        .HasComment("Time of delivery");

                    b.Property<bool>("IsContract")
                        .HasColumnType("bit")
                        .HasComment("Is the contract concluded");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit")
                        .HasComment("Is the product is delivered");

                    b.Property<bool>("IsTemperatureControlNeeded")
                        .HasColumnType("bit")
                        .HasComment("Product temperature requirement");

                    b.Property<string>("LoadingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Loadring address");

                    b.Property<string>("LoadingCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Loading Country");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Product additional description");

                    b.Property<string>("ProductImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Product picture URL");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product name");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Product price in EURO");

                    b.Property<int>("ProductQuantity")
                        .HasMaxLength(2147483647)
                        .HasColumnType("int")
                        .HasComment("Product quantity in kilograms");

                    b.Property<DateTime>("PublicationDay")
                        .HasColumnType("datetime2")
                        .HasComment("Publication day");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int")
                        .HasComment("Recipient identifier");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasComment("Supplier identifier");

                    b.Property<int?>("TrailerId")
                        .HasColumnType("int")
                        .HasComment("Offer Trailer");

                    b.Property<int?>("TransporterId")
                        .HasColumnType("int")
                        .HasComment("Transport company identifier");

                    b.Property<int?>("TruckId")
                        .HasColumnType("int")
                        .HasComment("Offer Truck");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TransporterId");

                    b.HasIndex("TruckId");

                    b.ToTable("Offers");

                    b.HasComment("Offer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionTypeId = 1,
                            IsContract = false,
                            IsDelivered = false,
                            IsTemperatureControlNeeded = true,
                            LoadingAddress = "Badajoz, str. C.Jose.Caldito Ruiz 50",
                            LoadingCountry = "Spain",
                            ProductDescription = "Тhe produce is fresh from animals raised on certified farms",
                            ProductImageURL = "/Images/ProductImages/FreshPorkMeat.png",
                            ProductName = "Pork Meat",
                            ProductPrice = 102504m,
                            ProductQuantity = 19840,
                            PublicationDay = new DateTime(2024, 4, 12, 19, 4, 6, 311, DateTimeKind.Local).AddTicks(4797),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActionTypeId = 3,
                            AddressOfDestination = "Burgas,Lozovo district, str.Ruzha 1",
                            CountryOfDestination = "Bulgaria",
                            IsContract = false,
                            IsDelivered = false,
                            IsTemperatureControlNeeded = false,
                            LoadingAddress = "Foggia, str. Via Daniele Manin 14",
                            LoadingCountry = "Italy",
                            ProductDescription = "Baled and suitable for recycling",
                            ProductImageURL = "/Images/ProductImages/PlasticWaste.png",
                            ProductName = "Plastic waste",
                            ProductPrice = 4200m,
                            ProductQuantity = 17800,
                            PublicationDay = new DateTime(2024, 4, 12, 19, 4, 6, 311, DateTimeKind.Local).AddTicks(4799),
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActionTypeId = 2,
                            IsContract = false,
                            IsDelivered = false,
                            IsTemperatureControlNeeded = false,
                            LoadingAddress = "Vienna, str. Sindelargasse 17",
                            LoadingCountry = "Austria",
                            ProductDescription = "Manufactured in 2020 with a safety certificate",
                            ProductImageURL = "/Images/ProductImages/ScaffoldingMaterials.png",
                            ProductName = "Scaffolding material",
                            ProductPrice = 3500m,
                            ProductQuantity = 19900,
                            PublicationDay = new DateTime(2024, 4, 12, 19, 4, 6, 311, DateTimeKind.Local).AddTicks(4800),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 4,
                            ActionTypeId = 1,
                            IsContract = false,
                            IsDelivered = false,
                            IsTemperatureControlNeeded = true,
                            LoadingAddress = "Debrecen, str. Biczokert 52",
                            LoadingCountry = "Hungary",
                            ProductDescription = "Оwn production with a high quality certificate",
                            ProductImageURL = "/Images/ProductImages/chocolateProducts.png",
                            ProductName = "Chocolate Products",
                            ProductPrice = 36745.55m,
                            ProductQuantity = 17450,
                            PublicationDay = new DateTime(2024, 4, 12, 19, 4, 6, 311, DateTimeKind.Local).AddTicks(4802),
                            SupplierId = 1
                        });
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.RecipientCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Recipient company identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Recipient company address");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Recipient company country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Recipient company identifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Recipient company phone number");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Name", "Country")
                        .IsUnique();

                    b.ToTable("RecipientsCompanies");

                    b.HasComment("Recipient company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Charleroi, str. Rue de Marcinelle 50",
                            Country = "Belgium",
                            Name = "Global workers",
                            OwnerId = "5lk6e95e-lyj5-w25e-8w5q-9q7w8c6u3spo",
                            PhoneNumber = "+3265689899852"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lyon, str. Rue Domer 12",
                            Country = "France",
                            Name = "LeDecale Boutique",
                            OwnerId = "dd2d2a66-rer7-y9y9-qlpq-w56a9w8s5a32",
                            PhoneNumber = "+332566985556140"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Florence, str. Via Madonna Della Querce 4",
                            Country = "Italy",
                            Name = "SmartSolutions",
                            OwnerId = "d69wrpfj-asdr-uijj-j5ff-5s8q7w4e4532",
                            PhoneNumber = "+3900125221287"
                        });
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.SupplierCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Supplier company identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Supplier company address");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Supplier company country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Supplier company identifier");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Supplier company phone number");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Name", "Country")
                        .IsUnique();

                    b.ToTable("SuppliersCompanies");

                    b.HasComment("Supplier company of product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Thessaloniki, str. Perdika 10",
                            Country = "Greece",
                            Name = "Smart Elinas LTD",
                            OwnerId = "k3fcll56-l458-6871-q3r9-2ve3w9a54s87",
                            PhoneNumber = "+0030695422154"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Vienna, str. LowelStrasse 69",
                            Country = "Austria",
                            Name = "MDY Tools",
                            OwnerId = "k21se8s5-plow-4sw4-qzp0-128fpq6zr8klo",
                            PhoneNumber = "+4368782664400"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Barcelona, str. Carrer Cruspinera 3",
                            Country = "Spain",
                            Name = "Stay Fly",
                            OwnerId = "QWE15t6s-hfgd-998q-mcs1-pekc249wlfhn",
                            PhoneNumber = "+342244501136"
                        });
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.Trailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("HasTemperatureControl")
                        .HasColumnType("bit")
                        .HasComment("Is there temperature control");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Trailer make");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Trailer registration number");

                    b.Property<string>("TrailerImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trailer image URL");

                    b.Property<int>("TransportCompanyId")
                        .HasColumnType("int")
                        .HasComment("Owner identifier");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.HasIndex("TransportCompanyId");

                    b.ToTable("Trailers");

                    b.HasComment("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasTemperatureControl = false,
                            Make = "Kodel",
                            RegistrationNumber = "UT775",
                            TrailerImageURL = "/Images/TrailerImages/Kogel.png",
                            TransportCompanyId = 1
                        },
                        new
                        {
                            Id = 2,
                            HasTemperatureControl = false,
                            Make = "Krone",
                            RegistrationNumber = "IJ274MQG",
                            TrailerImageURL = "/Images/TrailerImages/Krone.png",
                            TransportCompanyId = 1
                        },
                        new
                        {
                            Id = 3,
                            HasTemperatureControl = true,
                            Make = "Schmitz Cargobull",
                            RegistrationNumber = "P79634",
                            TrailerImageURL = "/Images/TrailerImages/SchmitzCargobull.png",
                            TransportCompanyId = 2
                        },
                        new
                        {
                            Id = 4,
                            HasTemperatureControl = true,
                            Make = "Gray Adams",
                            RegistrationNumber = "F5011S",
                            TrailerImageURL = "/Images/TrailerImages/Gray_Adams_Frigo.png",
                            TransportCompanyId = 1
                        });
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.TransportCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Transport company identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Transport company address");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Transport company country");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Transport company name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Owner identifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Transport company phone number");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Name", "Country")
                        .IsUnique();

                    b.ToTable("TransportsCompanies");

                    b.HasComment("Transport company of goods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Varna, str. Popovi livadi 99",
                            Country = "Bulgaria",
                            Name = "NG TRANS",
                            OwnerId = "d33qwej9-02ap-11mnl-hflp-lpszavr2s588",
                            PhoneNumber = "+3598897415202"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Kostanza, Strada Spiru Haret 42",
                            Country = "Romania",
                            Name = "VIOREL TRANS GROUP",
                            OwnerId = "0s3a2w5e-sad5-12s5-owls-psdasfas5f5n",
                            PhoneNumber = "+00407775987456."
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "k3fcll56-l458-6871-q3r9-2ve3w9a54s87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4b35cca3-e652-4b8a-843d-ff234867d123",
                            Email = "firstUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FIRSTUSER@MAIL.COM",
                            NormalizedUserName = "FIRSTUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTQEgdBggpUeKArHzJI78M/olfQjFp2urHDOuGHpxEuSMf/H4HFCdaHS9cpC/iTZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d484fe20-0323-4c8b-a838-70e1b753e8db",
                            TwoFactorEnabled = false,
                            UserName = "firstUser@mail.com"
                        },
                        new
                        {
                            Id = "k21se8s5-plow-4sw4-qzp0-128fpq6zr8klo",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4ca0b18-1507-447a-85a7-7ae0a9a367fa",
                            Email = "secondUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECONDUSER@MAIL.COM",
                            NormalizedUserName = "SECONDUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAltd1kYt1l+GR072mVtVyXeeiW0Eq0+AqFKINkNThi4mN470srL3sb/Jg35aR9eQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2744ab1e-6231-41b1-9850-74e3848f73df",
                            TwoFactorEnabled = false,
                            UserName = "secondUser@mail.com"
                        },
                        new
                        {
                            Id = "QWE15t6s-hfgd-998q-mcs1-pekc249wlfhn",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eaf5d364-eb19-4242-8452-8aa3fb5f33a2",
                            Email = "thirdUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "THIRDUSER@MAIL.COM",
                            NormalizedUserName = "THIRDUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAPRg87R0blCsE7zzKOjFx8jStUCTn5dJGet0BQUeQ3l/b9mh/qAwFBI5v/6kaJFAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d983c7b-7d23-4c6f-a685-60dea4fc4837",
                            TwoFactorEnabled = false,
                            UserName = "thirdUser@mail.com"
                        },
                        new
                        {
                            Id = "d33qwej9-02ap-11mnl-hflp-lpszavr2s588",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3348df2a-c65d-40db-9313-e177aec1ac71",
                            Email = "fourthUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FOURTHUSER@MAIL.COM",
                            NormalizedUserName = "FOURTHUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7l5qQUP5oZz9/iao3ROPXgkZaIP+7Eqyt0IU7HVqZOmSCvUaGN3FJXUMMXDZ2cYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2c1b2f0-e489-441f-9363-50f3dc8af4e4",
                            TwoFactorEnabled = false,
                            UserName = "fourthUser@mail.com"
                        },
                        new
                        {
                            Id = "0s3a2w5e-sad5-12s5-owls-psdasfas5f5n",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9cacf5c-6d31-4130-97a2-a60ebd36a8c1",
                            Email = "fifthUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "FIFTHUSER@MAIL.COM",
                            NormalizedUserName = "FIFTHUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKZgfkMsMu2G6yhuZX/D+uh/XTe6yrCcnpdKKHUAvx4urOoBzmxytzMcufu+S+uqaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcc93bc8-0aaa-4a79-b662-9ca8029f4ed9",
                            TwoFactorEnabled = false,
                            UserName = "fifthUser@mail.com"
                        },
                        new
                        {
                            Id = "5lk6e95e-lyj5-w25e-8w5q-9q7w8c6u3spo",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0edc8b22-a4ae-4c40-807d-7a1a8204da2c",
                            Email = "sixthUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SIXTHUSER@MAIL.COM",
                            NormalizedUserName = "SIXTHUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIt06UIpJqljODxV53lP6hA76OP11od7OYPlm48xYXBy8s0HB7ucYP3oO9iImKizyw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8057354-e019-4835-ba98-e6c48003848c",
                            TwoFactorEnabled = false,
                            UserName = "sixthUser@mail.com"
                        },
                        new
                        {
                            Id = "dd2d2a66-rer7-y9y9-qlpq-w56a9w8s5a32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3593efba-ee6c-44ae-9999-8c7aa1b77db8",
                            Email = "seventhuser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SEVENTHUSER@MAIL.COM",
                            NormalizedUserName = "SEVENTHUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDwXIUQ/Rwc2PsYMqwIW59Qnw7mFqEILtTapjG01BdWG8zpFT8f7YtJezJr2xw5T7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9db775d9-8057-4f9f-96f3-4ce3b35d6bfb",
                            TwoFactorEnabled = false,
                            UserName = "seventhUser@mail.com"
                        },
                        new
                        {
                            Id = "d69wrpfj-asdr-uijj-j5ff-5s8q7w4e4532",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b02eb49-829f-4adf-ba0f-336ca5420a3e",
                            Email = "eighthUser@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EIGHTHUSER@MAIL.COM",
                            NormalizedUserName = "EIGHTHUSER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED7W3yrK6QTgcRdZqNx9sJPkv80d7ftwyTG8FmjafQu8surT/JV/mjJMuBBQJIdBCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7a8b656-74dd-4a4f-b837-3b9b2fa01980",
                            TwoFactorEnabled = false,
                            UserName = "eighthUser@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.AutoTruck", b =>
                {
                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.TransportCompany", "TransportCompany")
                        .WithMany("Trucks")
                        .HasForeignKey("TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportCompany");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.Offer", b =>
                {
                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.ActionType", "ActionType")
                        .WithMany("Offer")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.RecipientCompany", "Recipient")
                        .WithMany("Offers")
                        .HasForeignKey("RecipientId");

                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.SupplierCompany", "Supplier")
                        .WithMany("Offers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId");

                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.TransportCompany", "Transporter")
                        .WithMany("Offers")
                        .HasForeignKey("TransporterId");

                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.AutoTruck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId");

                    b.Navigation("ActionType");

                    b.Navigation("Recipient");

                    b.Navigation("Supplier");

                    b.Navigation("Trailer");

                    b.Navigation("Transporter");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.RecipientCompany", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.SupplierCompany", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.Trailer", b =>
                {
                    b.HasOne("EuropeanContracts.Infrastructure.Data.Models.TransportCompany", "TransportCompany")
                        .WithMany("Trailers")
                        .HasForeignKey("TransportCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportCompany");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.TransportCompany", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.ActionType", b =>
                {
                    b.Navigation("Offer");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.RecipientCompany", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.SupplierCompany", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("EuropeanContracts.Infrastructure.Data.Models.TransportCompany", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Trailers");

                    b.Navigation("Trucks");
                });
#pragma warning restore 612, 618
        }
    }
}
